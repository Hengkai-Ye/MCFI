Try:
  popq %rcx
  movq %gs:Idx, %rdi
1:cmpq %rdi, %gs:(%rcx)
  jne  Lcheck
  jmpq *%rcx

Lcheck:
2:movq  %gs:(%rcx), %rsi
  testb $1, %sil
  jne   Lreport
  cmpl  %esi, %ecx
  jne   Try
Lreport:
  leaq  Try, %rdi    # which indirect branch
  movq  %rcx, %rsi   # intentional control-flow target
  movq  $Idx, %rdx   # which BID entry
                     # BID
                     # TID
  jmp   MCFIViolationReport

The following cases might happen:

* BID == TID, check passed.

* 1=>TID.validity == 0, should halt

  2=>BID == TID, impossible
  2=>TID.validity == 0, hlt
  2=>TID.version != BID.version, retry
  2=>TID.ECN != TID.ECN, impossible

* 1=>TID.version != BID.version, should retry

  2=>BID == TID, impossible
  2=>TID.validity == 0, the target code has been deleted.
     if this control-flow transfer is supposed to happen, then
     TID.validity should not happen, because there should be
     checks that ensure all the code has decremented the reference
     count of the deleted code, so this control-flow transfer is
     not supposed to happen, then hlt is the deserved action
     otherwise, hlt is also deserved.
  2=>TID.version != BID.version, retry
  2=>TID.ECN != TID.ECN, impossible

* 1=>TID.ECN != BID.ECN, should halt

  2=>BID == TID, impossible
  2=>TID.validity == 0, hlt
  2=>TID.version != BID.version, retry
  2=>TID.ECN != TID.ECN, hlt
